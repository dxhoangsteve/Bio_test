name: Deploy BioWeb to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bioweb

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: |
          cd /root/bioweb-production

          # Clone/update source code
          if [ ! -d "source" ]; then
            git clone https://github.com/${{ github.repository }} source
          else
            cd source
            git fetch origin
            git reset --hard origin/main
            cd ..
          fi

          # Copy docker-compose file from source
          cp source/docker-compose.production.yml .
          cp source/nginx.conf . || echo "nginx.conf not found, will create"

          # Create SSL certificate for domain
          if [ ! -f "ssl/server.crt" ]; then
            mkdir -p ssl
            openssl req -x509 -newkey rsa:2048 -keyout ssl/server.key -out ssl/server.crt -days 365 -nodes \
              -subj "/C=VN/ST=HCM/L=HCM/O=BioWeb/CN=dxhoang.site"
            chmod 600 ssl/server.key
            chmod 644 ssl/server.crt
          fi

          # Create nginx.conf if not exists
          if [ ! -f "nginx.conf" ]; then
            cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }

          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;

              upstream bioweb {
                  server bioweb-app:80;
              }

              # Redirect www to non-www
              server {
                  listen 80;
                  listen 443 ssl http2;
                  server_name www.dxhoang.site;

                  ssl_certificate /etc/nginx/ssl/server.crt;
                  ssl_certificate_key /etc/nginx/ssl/server.key;

                  return 301 https://dxhoang.site$request_uri;
              }

              # HTTP to HTTPS redirect
              server {
                  listen 80;
                  server_name dxhoang.site;
                  return 301 https://dxhoang.site$request_uri;
              }

              # Main HTTPS server
              server {
                  listen 443 ssl http2;
                  server_name dxhoang.site;

                  ssl_certificate /etc/nginx/ssl/server.crt;
                  ssl_certificate_key /etc/nginx/ssl/server.key;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
                  ssl_prefer_server_ciphers off;

                  # Security headers
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header Referrer-Policy "no-referrer-when-downgrade" always;
                  add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

                  location / {
                      proxy_pass http://bioweb;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_set_header X-Forwarded-Host $host;
                      proxy_set_header X-Forwarded-Server $host;

                      # WebSocket support
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
              }
          }
          EOF
          fi

          # Configure firewall
          echo "Configuring firewall..."
          ufw allow 22/tcp
          ufw allow 80/tcp
          ufw allow 443/tcp
          ufw --force enable || echo "UFW already configured"

          # Stop current containers
          docker-compose -f docker-compose.production.yml down || true

          # Build new image directly on VPS
          cd source
          docker build -f Dockerfile.production -t bioweb:latest .
          cd ..

          # Start with new image
          docker-compose -f docker-compose.production.yml up -d

          # Wait for containers to start
          echo "Waiting for containers to start..."
          sleep 60

          # Check container status
          echo "Container status:"
          docker-compose -f docker-compose.production.yml ps

          # Check app logs if unhealthy
          echo "App container logs:"
          docker logs bioweb-app --tail 50

          # Check if nginx is responding on ports 80 and 443
          echo "Testing nginx on port 80..."
          curl -f http://localhost:80/ || echo "⚠️ Nginx not responding on port 80"

          echo "Testing nginx on port 443..."
          curl -k -f https://localhost:443/ || echo "⚠️ Nginx not responding on port 443"

          # Check if app container is healthy
          echo "Checking app container health..."
          docker exec bioweb-app curl -f http://localhost:80/health || echo "⚠️ App container not healthy"

          # Clean up old images
          docker image prune -f

          # Test HTTP redirect
          echo "Testing HTTP redirect..."
          curl -I http://dxhoang.site/ | grep -q "301\|302" || echo "⚠️ HTTP redirect not working"

          # Test HTTPS
          echo "Testing HTTPS..."
          curl -k -f https://dxhoang.site/ || echo "⚠️ HTTPS not working"

          # Test API
          echo "Testing API..."
          curl -k -f https://dxhoang.site/api/health || echo "⚠️ API health check failed"

          echo "✅ Deployment completed!"
          echo "🌐 Access your app at: https://dxhoang.site"
