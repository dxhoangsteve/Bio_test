using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using BioWeb.Server.Data;

namespace BioWeb.Server.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SeedController : ControllerBase
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly IWebHostEnvironment _environment;

        public SeedController(IServiceProvider serviceProvider, IWebHostEnvironment environment)
        {
            _serviceProvider = serviceProvider;
            _environment = environment;
        }

        /// <summary>
        /// ‚ö†Ô∏è NGUY HI·ªÇM: X√≥a to√†n b·ªô database v√† seed l·∫°i data m·ªõi
        /// CH·ªà HO·∫†T ƒê·ªòNG TRONG DEVELOPMENT ENVIRONMENT
        /// </summary>
        [HttpPost("force-seed")]
        public async Task<IActionResult> ForceSeed()
        {
            // üîí B·∫¢O V·ªÜ: Ch·ªâ cho ph√©p trong Development environment
            if (!_environment.IsDevelopment())
            {
                return Forbid("Endpoint n√†y ch·ªâ kh·∫£ d·ª•ng trong Development environment ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu production!");
            }

            try
            {
                // X√≥a data c≈©
                using var scope = _serviceProvider.CreateScope();
                var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                // X√≥a theo th·ª© t·ª± ƒë·ªÉ tr√°nh l·ªói foreign key
                context.Articles.RemoveRange(context.Articles);
                context.Projects.RemoveRange(context.Projects);
                context.Categories.RemoveRange(context.Categories);
                context.SiteConfigurations.RemoveRange(context.SiteConfigurations);
                context.AdminUsers.RemoveRange(context.AdminUsers);

                await context.SaveChangesAsync();
                Console.WriteLine("üóëÔ∏è ƒê√£ x√≥a data c≈©");

                // Seed data m·ªõi
                await SeedData.InitializeAsync(scope.ServiceProvider);

                return Ok(new {
                    message = "Seed data xong!",
                    warning = "‚ö†Ô∏è To√†n b·ªô d·ªØ li·ªáu c≈© ƒë√£ b·ªã x√≥a v√† thay th·∫ø b·∫±ng d·ªØ li·ªáu m·∫´u",
                    environment = _environment.EnvironmentName
                });
            }
            catch (Exception ex)
            {
                return BadRequest(new {
                    message = "L·ªói seed data",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// Ki·ªÉm tra s·ªë l∆∞·ª£ng d·ªØ li·ªáu trong database
        /// CH·ªà HO·∫†T ƒê·ªòNG TRONG DEVELOPMENT ENVIRONMENT
        /// </summary>
        [HttpGet("check-data")]
        public async Task<IActionResult> CheckData()
        {
            // üîí B·∫¢O V·ªÜ: Ch·ªâ cho ph√©p trong Development environment
            if (!_environment.IsDevelopment())
            {
                return Forbid("Endpoint n√†y ch·ªâ kh·∫£ d·ª•ng trong Development environment ƒë·ªÉ b·∫£o v·ªá th√¥ng tin h·ªá th·ªëng!");
            }

            using var scope = _serviceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            var result = new
            {
                AdminUsers = await context.AdminUsers.CountAsync(),
                SiteConfigurations = await context.SiteConfigurations.CountAsync(),
                Categories = await context.Categories.CountAsync(),
                Projects = await context.Projects.CountAsync(),
                Articles = await context.Articles.CountAsync(),
                Environment = _environment.EnvironmentName,
                Timestamp = DateTime.UtcNow
            };

            return Ok(result);
        }
    }
}
