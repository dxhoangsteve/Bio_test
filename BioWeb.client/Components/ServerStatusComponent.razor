@namespace BioWeb.client.Components
@inject IJSRuntime JSRuntime

@if (IsServerDown)
{
    <div class="server-maintenance-overlay">
        <div class="maintenance-container">
            <div class="maintenance-icon">
                <i class="fas fa-tools fa-4x"></i>
            </div>
            <h1 class="maintenance-title">Server đang bảo trì</h1>
            <p class="maintenance-message">
                Xin lỗi, server hiện tại đang được bảo trì hoặc không thể kết nối. 
                Vui lòng thử lại sau ít phút.
            </p>
            <div class="maintenance-details">
                <p><strong>Thời gian:</strong> @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</p>
                <p><strong>Lỗi:</strong> @ErrorMessage</p>
            </div>
            <button class="retry-button" @onclick="RetryConnection">
                <i class="fas fa-sync-alt @(IsRetrying ? "fa-spin" : "")"></i>
                @(IsRetrying ? "Đang thử lại..." : "Thử lại")
            </button>
        </div>
    </div>
}

<style>
    .server-maintenance-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, 
            rgba(18, 194, 233, 0.95) 0%, 
            rgba(196, 113, 237, 0.95) 50%, 
            rgba(246, 79, 89, 0.95) 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        font-family: 'Red Hat Mono', monospace;
    }

    .maintenance-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 40px;
        text-align: center;
        max-width: 500px;
        margin: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .maintenance-icon {
        color: #666;
        margin-bottom: 20px;
    }

    .maintenance-title {
        color: #333;
        font-size: 2rem;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .maintenance-message {
        color: #666;
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 25px;
    }

    .maintenance-details {
        background: rgba(0, 0, 0, 0.05);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 25px;
        font-size: 0.9rem;
        color: #555;
    }

    .retry-button {
        background: linear-gradient(90deg, 
            rgba(35, 243, 243, 0.8) 0%, 
            rgba(202, 68, 173, 0.6) 75%);
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        color: #000;
        font-family: 'Red Hat Mono', monospace;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .retry-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .retry-button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    @@media (max-width: 768px) {
        .maintenance-container {
            padding: 30px 20px;
            margin: 10px;
        }

        .maintenance-title {
            font-size: 1.5rem;
        }

        .maintenance-message {
            font-size: 1rem;
        }
    }
</style>

@code {
    [Parameter] public bool IsServerDown { get; set; }
    [Parameter] public string ErrorMessage { get; set; } = "";
    [Parameter] public EventCallback OnRetry { get; set; }

    private bool IsRetrying = false;

    private async Task RetryConnection()
    {
        if (IsRetrying) return;

        IsRetrying = true;
        StateHasChanged();

        try
        {
            await Task.Delay(1000); // Simulate retry delay
            await OnRetry.InvokeAsync();
        }
        finally
        {
            IsRetrying = false;
            StateHasChanged();
        }
    }
}
