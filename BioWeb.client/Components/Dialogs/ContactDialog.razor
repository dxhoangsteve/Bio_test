@using BioWeb.Shared.Models.DTOs
@using BioWeb.client.Services
@inject IApiService ApiService

<!-- Edit Contact Dialog -->
<BaseDialog Title="Sửa Thông Tin Liên Hệ" IsVisible="@IsVisible" IsLoading="@isLoading" SaveButtonText="Cập nhật"
    OnClose="@OnClose" OnSave="@HandleSave">

    @if (contact != null)
    {
        <div class="form-group mb-3">
            <label class="form-label">Email (chỉ xem)</label>
            <input type="email" class="form-control" @bind="contact.Email" readonly />
            <small class="form-text text-muted">Email không thể sửa từ đây</small>
        </div>

        <div class="form-group mb-3">
            <label class="form-label">Số điện thoại</label>
            <input type="tel" class="form-control" @bind="contact.PhoneNumber" placeholder="Ví dụ: +84 123 456 789" />
        </div>

        <div class="form-group mb-3">
            <label class="form-label">Địa chỉ</label>
            <textarea class="form-control" rows="2" @bind="contact.Address"
                placeholder="Nhập địa chỉ của bạn..."></textarea>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label class="form-label">GitHub URL</label>
                    <input type="url" class="form-control" @bind="contact.GitHubURL"
                        placeholder="https://github.com/username" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label class="form-label">LinkedIn URL</label>
                    <input type="url" class="form-control" @bind="contact.LinkedInURL"
                        placeholder="https://linkedin.com/in/username" />
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <label class="form-label">Facebook URL</label>
            <input type="url" class="form-control" @bind="contact.FacebookURL"
                placeholder="https://facebook.com/username" />
        </div>

        <div class="admin-info-section">
            <h6><i class="fas fa-chart-line me-2"></i>Thống kê Admin</h6>
            <div class="row">
                <div class="col-md-6">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-eye"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@viewCount</h4>
                            <p>Lượt xem Bio</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@(lastUpdated?.ToString("dd/MM") ?? "N/A")</h4>
                            <p>Cập nhật cuối</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="info-section">
            <h6><i class="fas fa-info-circle me-2"></i>Thông tin bổ sung</h6>
            <div class="row">
                <div class="col-md-12">
                    <small class="text-muted">
                        <strong>Lưu ý:</strong> Thông tin liên hệ sẽ hiển thị công khai trên website.
                        Lượt xem Bio chỉ admin mới thấy được.
                    </small>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center p-4">
            <i class="fas fa-spinner fa-spin fa-2x"></i>
            <p class="mt-2">Đang tải thông tin liên hệ...</p>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Không thể tải thông tin liên hệ. Vui lòng thử lại.
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            <i class="fas fa-check-circle me-2"></i>@successMessage
        </div>
    }
</BaseDialog>

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnContactChanged { get; set; }

    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";
    private ContactInfoDto? contact = null;
    private int viewCount = 0;
    private DateTime? lastUpdated = null;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && contact == null)
        {
            await LoadContact();
        }
    }

    private async Task LoadContact()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            contact = await ApiService.GetContactAsync();

            // TODO: Load admin stats (view count, last updated)
            // var stats = await ApiService.GetContactStatsAsync();
            // viewCount = stats.ViewCount;
            // lastUpdated = stats.LastUpdated;

            // Temporary mock data
            viewCount = 1234;
            lastUpdated = DateTime.Now.AddDays(-2);
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi tải thông tin liên hệ: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSave()
    {
        if (contact == null)
        {
            errorMessage = "Không có dữ liệu để lưu";
            return;
        }

        // Validation (optional fields)
        if (!string.IsNullOrWhiteSpace(contact.GitHubURL) && !IsValidUrl(contact.GitHubURL))
        {
            errorMessage = "GitHub URL không hợp lệ";
            return;
        }

        if (!string.IsNullOrWhiteSpace(contact.LinkedInURL) && !IsValidUrl(contact.LinkedInURL))
        {
            errorMessage = "LinkedIn URL không hợp lệ";
            return;
        }

        if (!string.IsNullOrWhiteSpace(contact.FacebookURL) && !IsValidUrl(contact.FacebookURL))
        {
            errorMessage = "Facebook URL không hợp lệ";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var response = await ApiService.UpdateContactAsync(contact);

            if (response.Success)
            {
                successMessage = "Cập nhật thông tin liên hệ thành công!";
                await OnContactChanged.InvokeAsync();

                // Auto close after 2 seconds
                await Task.Delay(2000);
                await OnClose.InvokeAsync();
            }
            else
            {
                errorMessage = response.Message ?? "Cập nhật thất bại";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi cập nhật thông tin liên hệ: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsValidUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out _);
    }

    // Public method để reset dialog khi mở lại
    public async Task Reset()
    {
        contact = null;
        errorMessage = "";
        successMessage = "";
        viewCount = 0;
        lastUpdated = null;

        if (IsVisible)
        {
            await LoadContact();
        }
    }
}

<style>
    .admin-info-section {
        background: linear-gradient(135deg, rgba(0, 123, 255, 0.1), rgba(40, 167, 69, 0.1));
        border: 1px solid rgba(0, 123, 255, 0.2);
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1.5rem 0;
    }

    .admin-info-section h6 {
        margin-bottom: 1rem;
        color: #007bff;
        font-weight: 600;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
    }

    .stat-icon {
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, #007bff, #28a745);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .stat-content h4 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 700;
        color: #333;
    }

    .stat-content p {
        margin: 0;
        font-size: 0.875rem;
        color: #666;
    }

    .info-section {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
    }

    .info-section h6 {
        margin-bottom: 0.75rem;
        color: #666;
        font-weight: 600;
    }

    .form-text {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .alert {
        border-radius: 8px;
        border: none;
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #28a745;
        border-left: 4px solid #28a745;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border-left: 4px solid #dc3545;
    }

    .alert-warning {
        background: rgba(255, 193, 7, 0.1);
        color: #ffc107;
        border-left: 4px solid #ffc107;
    }
</style>
