@page "/"
@layout EmptyLayout
@using BioWeb.client.Components.Layout
@using BioWeb.Shared.Models.DTOs
@using BioWeb.client.Services
@inject IApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Blog</PageTitle>

<BlogLayout Categories="@categories"
           CategoryFilterChanged="@OnCategoryFilterChanged"
           SelectedCategoryId="@selectedCategoryId">

    <div class="blog-content">
        @if (isLoading)
        {
            <div class="blog-loading">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="mt-3">Đang tải bài viết...</p>
            </div>
        }
        else if (!articles.Any())
        {
            <div class="blog-empty">
                <i class="fas fa-newspaper"></i>
                <h3>Chưa có bài viết nào</h3>
                <p>@(selectedCategoryId == 0 ? "Hiện tại chưa có bài viết nào được đăng." : "Không có bài viết nào trong chủ đề này.")</p>
            </div>
        }
        else
        {
            <!-- Articles Grid -->
            <div class="blog-article-grid">
                @foreach (var article in articles)
                {
                    <article class="blog-article-card" @onclick="() => ViewArticle(article.ArticleID)">
                        @if (!string.IsNullOrEmpty(article.ThumbnailURL))
                        {
                            <div class="blog-article-image">
                                <img src="@article.ThumbnailURL" alt="@article.Title" />
                            </div>
                        }
                        
                        <div class="blog-article-content">
                            <h2 class="blog-article-title">@article.Title</h2>
                            
                            <div class="blog-article-excerpt">
                                @GetExcerpt(article.Content)
                            </div>
                            
                            <div class="blog-article-meta">
                                <span class="blog-article-category">
                                    <i class="fas fa-tag"></i>
                                    @article.CategoryName
                                </span>
                                <span class="blog-article-date">
                                    @article.CreatedAt.ToString("dd/MM/yyyy")
                                </span>
                            </div>
                        </div>
                    </article>
                }
            </div>
        }
    </div>
</BlogLayout>

@code {
    private List<ArticleDto> articles = new();
    private List<CategoryDto> categories = new();
    private bool isLoading = true;
    private int selectedCategoryId = 0;

    protected override async Task OnInitializedAsync()
    {
        // Check for category parameter in URL
        var uri = new Uri(Navigation.Uri);
        if (!string.IsNullOrEmpty(uri.Query))
        {
            var queryParams = uri.Query.TrimStart('?').Split('&');
            foreach (var param in queryParams)
            {
                var keyValue = param.Split('=');
                if (keyValue.Length == 2 && keyValue[0] == "category")
                {
                    if (int.TryParse(keyValue[1], out int categoryId))
                    {
                        selectedCategoryId = categoryId;
                        break;
                    }
                }
            }
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load categories first
            categories = await ApiService.GetCategoriesAsync();

            // Load articles based on selected category
            if (selectedCategoryId == 0)
            {
                articles = await ApiService.GetPublishedArticlesAsync();
            }
            else
            {
                articles = await ApiService.GetArticlesByCategoryAsync(selectedCategoryId);
            }

            // Sort articles by date (newest first)
            articles = articles.OrderByDescending(a => a.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnCategoryFilterChanged(int categoryId)
    {
        selectedCategoryId = categoryId;
        isLoading = true;
        StateHasChanged();

        try
        {
            if (categoryId == 0)
            {
                // Load all articles
                articles = await ApiService.GetPublishedArticlesAsync();
            }
            else
            {
                // Load articles by category
                articles = await ApiService.GetArticlesByCategoryAsync(categoryId);
            }

            // Sort articles by date (newest first)
            articles = articles.OrderByDescending(a => a.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering articles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewArticle(int articleId)
    {
        Navigation.NavigateTo($"/blog/article/{articleId}");
    }

    private string GetExcerpt(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "";

        // Remove HTML tags and get first 150 characters
        var plainText = System.Text.RegularExpressions.Regex.Replace(content, "<.*?>", "");
        return plainText.Length > 150 ? plainText.Substring(0, 150) + "..." : plainText;
    }
}
