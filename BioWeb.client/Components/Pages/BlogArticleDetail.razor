@page "/blog/article/{ArticleId:int}"
@using BioWeb.Shared.Models.DTOs
@using BioWeb.client.Services
@using BioWeb.client.Components.Layout
@inject IApiService ApiService
@inject NavigationManager Navigation

<PageTitle>@(article?.Title ?? "Bài viết") - Blog</PageTitle>

<BlogLayout Categories="@categories" CategoryFilterChanged="@OnCategoryFilterChanged"
    SelectedCategoryId="@selectedCategoryId">

    <div class="blog-content">
        @if (isLoading)
        {
            <div class="blog-loading">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="mt-3">Đang tải bài viết...</p>
            </div>
        }
        else if (article == null)
        {
            <div class="blog-empty">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>Không tìm thấy bài viết</h3>
                <p>Bài viết bạn tìm kiếm không tồn tại hoặc đã bị xóa.</p>
                <button class="btn btn-primary" @onclick="BackToHome">
                    <i class="fas fa-arrow-left me-2"></i>Quay về trang chủ
                </button>
            </div>
        }
        else
        {
            <!-- Article Detail -->
            <article class="blog-article-detail">
                <!-- Back button -->
                <div class="article-navigation">
                    <button class="btn btn-outline-secondary" @onclick="BackToHome">
                        <i class="fas fa-arrow-left me-2"></i>Quay về trang chủ
                    </button>
                </div>

                <!-- Article header -->
                <header class="article-header">
                    <h1 class="article-title">@article.Title</h1>
                    <div class="article-meta">
                        <span class="article-category">
                            <i class="fas fa-tag"></i>
                            @article.CategoryName
                        </span>
                        <span class="article-date">
                            <i class="fas fa-calendar"></i>
                            @article.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                        </span>
                    </div>
                </header>

                <!-- Article image -->
                @if (!string.IsNullOrEmpty(article.ThumbnailURL))
                {
                    <div class="article-image">
                        <img src="@article.ThumbnailURL" alt="@article.Title" />
                    </div>
                }

                <!-- Article content -->
                <div class="article-content">
                    @((MarkupString)article.Content)
                </div>
            </article>
        }
    </div>
</BlogLayout>

@code {
    [Parameter] public int ArticleId { get; set; }

    private ArticleDto? article;
    private List<CategoryDto> categories = new();
    private bool isLoading = true;
    private int selectedCategoryId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (article?.ArticleID != ArticleId)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load article and categories in parallel
            var articleTask = ApiService.GetArticleByIdAsync(ArticleId);
            var categoriesTask = ApiService.GetCategoriesAsync();

            await Task.WhenAll(articleTask, categoriesTask);

            article = await articleTask;
            categories = await categoriesTask;

            if (article != null)
            {
                selectedCategoryId = article.CategoryID;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading article: {ex.Message}");
            article = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnCategoryFilterChanged(int categoryId)
    {
        // Navigate back to home with category filter
        Navigation.NavigateTo($"/?category={categoryId}");
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("/");
    }
}
